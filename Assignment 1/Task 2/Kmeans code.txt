from numpy.ma.core import zeros
from matplotlib.projections import process_projection_requirements

# Importing Necessary Libraries
import matplotlib.pyplot as plt
import cv2
import numpy as np
import math


def kMeans(data,number,classCenters):
  while(True):
      if(isinstance(data[0][0], np.uint8)):
        sumOfEachClass = np.zeros_like(classCenters, dtype=int)
      else:
        sumOfEachClass = np.zeros((number, len(classCenters[0])))
        newClassCenters= np.zeros_like(classCenters, dtype=int)
      countOfEachClass= np.zeros(len(classCenters), dtype=int)

      for x in data:
        for y in x:
          if(isinstance(y, np.uint8)):
            closestClassIndex = getClass1(y,classCenters)
            sumOfEachClass[closestClassIndex]+=y
          else:
            closestClassIndex = getClass2(y,classCenters)
            for i in range(len(classCenters[0])):
              sumOfEachClass[closestClassIndex][i]+=y[i]
          
          countOfEachClass[closestClassIndex]+=1
          
      if(isinstance(y,  np.uint8)):
        newClassCenters = np.divide(sumOfEachClass,countOfEachClass)
      else:
        for i in range(len(countOfEachClass)):
          if(countOfEachClass[i]==0):
            for j in range(len(y)):
              newClassCenters[i][j]=0
          else:
            for j in range(len(y)):
              newClassCenters[i][j]=sumOfEachClass[i][j]/countOfEachClass[i]

      newClassCenters[np.isnan(newClassCenters)] = 0
      if((newClassCenters == classCenters).all()):
        finalClassCenters=classCenters
        break
      else:
        classCenters=newClassCenters

  data2 = np.zeros((512,512), np.uint8)
  for i in range(len(data)):
    for j in range(len(data[i])):
            y = data[i][j]
            if(isinstance(y, np.uint8)):
              closestClassIndex = getClass1(y,finalClassCenters)
            else:
              closestClassIndex = getClass2(y,finalClassCenters)

            data[i][j]=finalClassCenters[closestClassIndex]
            data2[i][j]=closestClassIndex
  return data,data2


def getClass1(pixel,classCenters):
      min=9999
      minClass=500
      for center in classCenters:
        x=abs(pixel-center)
        if(x<min):
          min=x
          minClass=center
    
      i=0
      for center in classCenters:
        if(center==minClass):
          return i
        i=i+1

def getClass2(pixelRGB,classCenters):
      min=9999
      minClass=500
      for center in classCenters:
        sum=0
        for i in range(len(pixelRGB)):
          sum= sum + abs(pixelRGB[i]-center[i])**2
        if(sum==0): 
          x=0;
        else:
          x= math.log2(sum)

        if(x<min):
          min=x
          minClass=center
    
      index=0;
      for center in classCenters:
        flag= True;
        for i in range(len(center)):
          if(center[i]!=minClass[i]):
            flag= False
        if(flag):
          return index
        index=index+1
        

def getConfusionMatrix(img):
  
      arrOut = np.zeros((4,4))
      # arrOut=[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]
      for i in range(0,256):
        for j in range(0,256):
          if(img[i][j]==0):
            arrOut[0][0]=arrOut[0][0]+1
          else:
            if(img[i][j]==1):
              arrOut[0][1]=arrOut[0][1]+1
            if(img[i][j]==2):
              arrOut[0][2]=arrOut[0][2]+1
            if(img[i][j]==3):
              arrOut[0][3]=arrOut[0][3]+1

        for j in range(256,512):
          if(img[i][j]==1):
            arrOut[2][1]=arrOut[2][1]+1
          else:
            if(img[i][j]==0):
              arrOut[2][0]=arrOut[2][0]+1
            if(img[i][j]==2):
              arrOut[2][2]=arrOut[2][2]+1
            if(img[i][j]==3):
              arrOut[2][3]=arrOut[2][3]+1

      for i in range(256,512):
        for j in range(0,256):
          if(img[i][j]==2):
            arrOut[1][2]=arrOut[1][2]+1
          else:
            if(img[i][j]==0):
              arrOut[1][0]=arrOut[1][0]+1
            if(img[i][j]==1):
              arrOut[1][1]=arrOut[1][1]+1
            if(img[i][j]==3):
              arrOut[1][3]=arrOut[1][3]+1

        for j in range(256,512):
          if(img[i][j]==3):
            arrOut[3][3]=arrOut[3][3]+1
          else:
            if(img[i][j]==0):
              arrOut[3][0]=arrOut[3][0]+1
            if(img[i][j]==1):
              arrOut[3][1]=arrOut[3][1]+1
            if(img[i][j]==2):
              arrOut[3][2]=arrOut[3][2]+1
      return arrOut

#                   DataSet 3 //////////////////////

# img = cv2.imread('/content/Original.png', 0)
# img1 = cv2.imread('/content/testGrayImage_low.png', 0)
# img2 = cv2.imread('/content/testGrayImage_mid.png', 0)
# img3 = cv2.imread('/content/testGrayImage_hi.png', 0)

# img,imgClus=kMeans(img,2,[50,100,150,200])
# img1,img1Clus=kMeans(img1,2,[50,100,150,200])
# img2,img2Clus=kMeans(img2,2,[50,100,150,200])
# img3,img3Clus=kMeans(img3,2,[50,100,150,200])



# confusionMatrixImgLowNoise = getConfusionMatrix(img1Clus)
# confusionMatrixImgMidNoise = getConfusionMatrix(img2Clus)
# confusionMatrixImgHiNoise = getConfusionMatrix(img3Clus)

# plt.rc('figure', figsize=[7,7])
# plt.matshow(confusionMatrixImgLowNoise,cmap="Blues")
# for i in range(0,confusionMatrixImgLowNoise.shape[0]):
#     for j in range(0,confusionMatrixImgLowNoise.shape[1]):
#         plt.annotate(confusionMatrixImgLowNoise[i,j],(j,i))


# plt.rc('figure', figsize=[7,7])
# plt.matshow(confusionMatrixImgMidNoise,cmap="Blues")
# for i in range(0,confusionMatrixImgMidNoise.shape[0]):
#     for j in range(0,confusionMatrixImgMidNoise.shape[1]):
#         plt.annotate(confusionMatrixImgMidNoise[i,j],(j,i))

# plt.rc('figure', figsize=[7,7])
# plt.matshow(confusionMatrixImgHiNoise,cmap="Blues")
# for i in range(0,confusionMatrixImgHiNoise.shape[0]):
#     for j in range(0,confusionMatrixImgHiNoise.shape[1]):
#         plt.annotate(confusionMatrixImgHiNoise[i,j],(j,i))


# cv2.imwrite('/content/KMeans_Original.png', img)
# cv2.imwrite('/content/KMeans_low.png', img1)
# cv2.imwrite('/content/KMeans_mid.png', img2)
# cv2.imwrite('/content/KMeans_hi.png', img3)


#                    Dataset2////////////////


# img3096G = cv2.imread('/content/sample_data/3096G.jpg', 0)
# img8023C = cv2.imread('/content/sample_data/8023C.jpg', 1)
# img8023G = cv2.imread('/content/sample_data/8023G.jpg', 0)
# img8143C = cv2.imread('/content/sample_data/8143C.jpg', 1)
# img8143G = cv2.imread('/content/sample_data/8143G.jpg', 0)


# img3096CKMeans=kMeans(img3096C,2,[[73,73,73],[173,173,173]])
# img3096GKMeans=kMeans(img3096G,3,[73,73,73])
# img8023CKMeans=kMeans(img8023C,2,[[73,73,73],[173,173,173]])
# img8023GKMeans=kMeans(img8023G,3,[73,73,73])
# img8143CKMeans=kMeans(img8143C,2,[[73,73,73],[173,173,173]])
# img8143GKMeans=kMeans(img8143G,3,[73,73,73])

# cv2.imwrite('/content/img3096CKMeans.png', img3096CKMeans[0])
# cv2.imwrite('/content/img3096GKMeans.png', img3096GKMeans[0])
# cv2.imwrite('/content/img8023CKMeans.png', img8023CKMeans[0])
# cv2.imwrite('/content/img8023GKMeans.png', img8023GKMeans[0])
# cv2.imwrite('/content/img8143CKMeans.png', img8143CKMeans[0])
# cv2.imwrite('/content/img8143GKMeans.png', img8143GKMeans[0])



