import numpy as np; 
import math;
import cv2;
from matplotlib import pyplot as plt;
from numpy import asarray
from numpy import savetxt

def EmAlgo(numberOfClasses,initialEstimations,toleranceLevel,input):
  flag=False
  iterations=0
  while(flag==False):
    p0 = np.zeros((len(input),len(input[0])),dtype=np.float64)
    p1 = np.zeros((len(input),len(input[0])),dtype=np.float64)
    p2 = np.zeros((len(input),len(input[0])),dtype=np.float64)
    p3 = np.zeros((len(input),len(input[0])),dtype=np.float64)

    for i in range(len(input)):
      for j in range(len(input[i])):
        p0[i][j]=prob(initialEstimations[0][0],input[i][j],initialEstimations[0][1])
        p1[i][j]=prob(initialEstimations[1][0],input[i][j],initialEstimations[1][1])
        p2[i][j]=prob(initialEstimations[2][0],input[i][j],initialEstimations[2][1])
        p3[i][j]=prob(initialEstimations[3][0],input[i][j],initialEstimations[3][1])

    newEstimations = newMuAndTheta(input,p0,p1,p2,p3)
    flag = doIStop(initialEstimations,newEstimations,toleranceLevel) 
    initialEstimations=newEstimations
    iterations=iterations+1
  
  classificationMatrix = np.zeros((len(input),len(input[i])))

  for i in range(len(input)):
      for j in range(len(input[i])):
        if(p0[i][j]>p1[i][j] and p0[i][j]>p2[i][j] and p0[i][j]>p3[i][j]):
          classificationMatrix[i][j]=0
        elif(p1[i][j]>p0[i][j] and p1[i][j]>p2[i][j] and p1[i][j]>p3[i][j]):
          classificationMatrix[i][j]=1
        elif(p2[i][j]>p0[i][j] and p2[i][j]>p1[i][j] and p2[i][j]>p3[i][j]):
          classificationMatrix[i][j]=2
        else:
          classificationMatrix[i][j]=3

  return [classificationMatrix,newEstimations,iterations]


def newMuAndTheta(img,arr0,arr1,arr2,arr3):
  sum0=0
  count0=0
  sum1=0
  count1=0
  sum2=0
  count2=0
  sum3=0
  count3=0
  for i in range(len(img)):
    for j in range(len(img[i])):
      sum0 = sum0 + (img[i][j]*arr0[i][j])
      count0 = count0 + arr0[i][j]
      sum1 = sum1 + (img[i][j]*arr1[i][j])
      count1 = count1 + arr1[i][j]
      sum2 = sum2 + (img[i][j]*arr2[i][j])
      count2 = count2 + arr2[i][j]
      sum3 = sum3 + (img[i][j]*arr3[i][j])
      count3 = count3 + arr3[i][j]
  
  outt = np.zeros((4,2))

  outt[0][0]= sum0/count0
  outt[1][0]= sum1/count1
  outt[2][0]= sum2/count2
  outt[3][0]= sum3/count3

  sum0=0
  sum1=0
  sum2=0
  sum3=0

  for i in range(len(img)):
    for j in range(len(img[i])):
      sum0 = sum0 + ( math.pow((img[i][j]-outt[0][0]), 2) * arr0[i][j] )
      sum1 = sum1 + ( math.pow((img[i][j]-outt[1][0]), 2) * arr1[i][j] )
      sum2 = sum2 + ( math.pow((img[i][j]-outt[2][0]), 2) * arr2[i][j] )
      sum3 = sum3 + ( math.pow((img[i][j]-outt[3][0]), 2) * arr3[i][j] )

  outt[0][1]=sum0/count0
  outt[1][1]=sum0/count0
  outt[2][1]=sum0/count0
  outt[3][1]=sum0/count0

  return outt


def prob(mu,x,theta):
  number = ((x-mu)*(x-mu))/(2*theta*theta)
  p = (1/(2*math.pi*theta*theta))*math.exp(-number)
  return p

def doIStop(oldParams,newParams,e):
    diff = 1;
    for i in range(len(oldParams)):
        diff *= abs(oldParams[i][1]-newParams[i][1]);
    if(diff<e):
        return False;
    else:
        return True;



###############################################################################


def getConfusionMatrix(img):
  
      arrOut = np.zeros((4,4))
      for i in range(0,256):
        for j in range(0,256):
          if(img[i][j]==0):
            arrOut[0][0]=arrOut[0][0]+1
          else:
            if(img[i][j]==2):
              arrOut[0][1]=arrOut[0][1]+1
            if(img[i][j]==2):
              arrOut[0][2]=arrOut[0][2]+1
            if(img[i][j]==3):
              arrOut[0][3]=arrOut[0][3]+1

        for j in range(256,512):
          if(img[i][j]==1):
            arrOut[2][1]=arrOut[2][1]+1
          else:
            if(img[i][j]==0):
              arrOut[2][0]=arrOut[2][0]+1
            if(img[i][j]==2):
              arrOut[2][2]=arrOut[2][2]+1
            if(img[i][j]==3):
              arrOut[2][3]=arrOut[2][3]+1

      for i in range(256,512):
        for j in range(0,256):
          if(img[i][j]==2):
            arrOut[1][2]=arrOut[1][2]+1
          else:
            if(img[i][j]==0):
              arrOut[1][0]=arrOut[1][0]+1
            if(img[i][j]==1):
              arrOut[1][1]=arrOut[1][1]+1
            if(img[i][j]==3):
              arrOut[1][3]=arrOut[1][3]+1

        for j in range(256,512):
          if(img[i][j]==3):
            arrOut[3][3]=arrOut[3][3]+1
          else:
            if(img[i][j]==0):
              arrOut[3][0]=arrOut[3][0]+1
            if(img[i][j]==1):
              arrOut[3][1]=arrOut[3][1]+1
            if(img[i][j]==2):
              arrOut[3][2]=arrOut[3][2]+1
      return arrOut


##############################################################################

# imgLow = cv2.imread('/content/testGrayImage_low.png', 0)
# classificationMatrixL,newEstimationsL,iterationsL = EmAlgo(4,[[25,1],[90,1],[160,1],[240,1]],0.01,imgLow)
# confusionLow = getConfusionMatrix(classificationMatrixL)
# LowNoiseAccuracies = [100*confusionLow[0][0]/65536 , 100*confusionLow[1][1]/65536 , 100*confusionLow[2][2]/65536 , 100*confusionLow[3][3]/65536 , 100*(confusionLow[0][0]+confusionLow[1][1]+confusionLow[2][2]+confusionLow[3][3])/262144]
# print("For Low Noise image, the accuracies were as follows")
# print("Accuracy for class 1: ",LowNoiseAccuracies[0])
# print("Accuracy for class 2: ",LowNoiseAccuracies[1])
# print("Accuracy for class 3: ",LowNoiseAccuracies[2])
# print("Accuracy for class 4: ",LowNoiseAccuracies[3])
# print("Overall Accuracy: ",LowNoiseAccuracies[4])
# print()
# print("Number Of Iterations ",iterationsL)
# print()
# print()

# for i in range(0,512):
#   for j in range(0,512): 
#     if(classificationMatrixL[i][j]==0):
#       imgLow[i][j]=newEstimationsL[0][0]
#     elif(classificationMatrixL[i][j]==1):
#       imgLow[i][j]=newEstimationsL[1][0]
#     elif(classificationMatrixL[i][j]==2):
#       imgLow[i][j]=newEstimationsL[2][0]
#     elif(classificationMatrixL[i][j]==3):
#       imgLow[i][j]=newEstimationsL[3][0]
      
# cv2.imwrite('/content/EMLow.png', imgLow)
# dataL = asarray(imgLow)
# savetxt('/content/ConfusionMatrix.csv', dataL, delimiter=',')
##############################################################################


imgMid = cv2.imread('/content/testGrayImage_mid.png', 0)
classificationMatrixM,newEstimationsM,iterationsM = EmAlgo(4,[[25,1],[90,1],[160,1],[240,1]],0.01,imgMid)
confusionMid = getConfusionMatrix(classificationMatrixM)
MidNoiseAccuracies = [100*confusionMid[0][0]/65536 , 100*confusionMid[1][1]/65536 , 100*confusionMid[2][2]/65536 , 100*confusionMid[3][3]/65536 , 100*(confusionMid[0][0]+confusionMid[1][1]+confusionMid[2][2]+confusionMid[3][3])/262144]
print("For Mid Noise image, the accuracies were as follows")
print("Accuracy for class 1: ",MidNoiseAccuracies[0])
print("Accuracy for class 2: ",MidNoiseAccuracies[1])
print("Accuracy for class 3: ",MidNoiseAccuracies[2])
print("Accuracy for class 4: ",MidNoiseAccuracies[3])
print("Overall Accuracy: ",MidNoiseAccuracies[4])
print()
print("Number Of Iterations ",iterationsM)
print()
print()
for i in range(0,512):
  for j in range(0,512): 
    if(classificationMatrixM[i][j]==0):
      imgMid[i][j]=newEstimationsM[0][0]
    elif(classificationMatrixM[i][j]==1):
      imgMid[i][j]=newEstimationsM[1][0]
    elif(classificationMatrixM[i][j]==1):
      imgMid[i][j]=newEstimationsM[2][0]
    elif(classificationMatrixM[i][j]==1):
      imgMid[i][j]=newEstimationsM[3][0]

cv2.imwrite('/content/EMmid.png', imgMid)
dataM = asarray(imgMid)
savetxt('/content/ConfusionMatrixMid.csv', dataM, delimiter=',')


##############################################################################


# imgHi = cv2.imread('/content/testGrayImage_hi.png', 0)
# noiseHi = EmAlgo(4,[[25,1],[90,1],[160,1],[240,1]],0.01,imgHi)
# confusionHi = getConfusionMatrix(noiseHi[0])
# HiNoiseAccuracies = [100*confusionHi[0][0]/65536 , 100*confusionHi[1][1]/65536 , 100*confusionHi[2][2]/65536 , 100*confusionHi[3][3]/65536 , 100*(confusionHi[0][0]+confusionHi[1][1]+confusionHi[2][2]+confusionHi[3][3])/262144]
# print("For High Noise image, the accuracies were as follows")
# print("Accuracy for cluster 1: ",HiNoiseAccuracies[0])
# print("Accuracy for cluster 2: ",HiNoiseAccuracies[1])
# print("Accuracy for cluster 3: ",HiNoiseAccuracies[2])
# print("Accuracy for cluster 4: ",HiNoiseAccuracies[3])
# print("Overall Accuracy: ",HiNoiseAccuracies[4])

